def loudness(db) :
    '''
    Assumes db is an integer greater than or equal to 0,
    representing loudness in decibels.
    Return the string representing the perception of the loudness as
    given by the following table:
    Loudness in Decibels (db)     Perception
    -------------------------     ----------
    50 or lower                   quiet
    51-70, inclusive              intrusive
    71-90, inclusive              annoying
    91-110, inclusive             very annoying
    above 110                     uncomfortable

    For example,
    loudness(60) returns 'intrusive'
    '''
    if db >= 0:
        if db <= 51:
            return str('quiet')
        if db >= 51 and db <= 70:
            return str('intrusive')
        if db >= 71 and db <= 90:
            return str('annoying')
        if db >= 91 and db <= 110:
            return str('very annoying')
        if db >= 110:
            return str('uncomfortable')
            

def invest(money, rate, goal):
    '''
    Assume that money, rate, goal are floating point numbers,
    where
    money is an intial investment in an account,
    rate is the interest rate in percent, and
    goal the desired amount of money to be reached as interest
    is added each term (unit of time).
    Assume that interest is added to the account each term
    in the amount of (rate/100) times the current money in the account.
    Returns the number of terms required to reach the goal.

    For example,
    invest(100.0, 10.0, 110.0) should return 1
    invest(100.0, 10.0, 105.0) should return 1 as well
    invest(100.0, 10.0, 200.0) should return 8
    '''

    num = 0
    while money < goal:
        interest = money * (rate / 100)
    money = money + interest
    num = num + 1
    return num

def leastCommon(S) :
    '''
    Assume that S is a nonempty string.
    Return the least common character in the string,
    but if there is a tie for least common, then
    return the alphabetically greatest among the least-common letters.

    FOR THIS QUESTION YOU MUST USE A DICTIONARY.

    For example,
    leastCommon('zabcdefg') returns 'z'
    leastCommon('aaabbbbccccddddeffffeggg') returns 'e'
    leastCommon('abcdefega') returns 'b'
    '''
    dict = {}
    for i in S:
        if i in dict:
            dict[i] += 1
        else:
            dict[i] = 1
    res = min(dict, key=dict.get)
    return res

import unittest
def recursiveSum(l) :
    '''
    Assumes l is a number or a list of numbers and lists (of numbers and lists of ...).
    Returns the sum of all the numbers

    You must use RECURSION to solve the problem.

    For example,
    recursiveSum(5) is 5
    recursiveSum([1,[[[[2]]]]]) is 3

	Note that type([1])==list
    '''
    if isinstance(l, int):
        return l

    else:
        sum = 0
        for i in l:
            sum += recursiveSum(l)
        return sum

ef mirrorRow(matrix) :
    '''
    Assume that matrix is a two-dimensional rectangular matrix of integers.
    Return True if any row is in the reverse sequence of
    some other row (not counting itself),
    otherwise return False.
    For example, in the following matrix, row 1 is the same as row 3, but
    in the opposite order, so for this matrix the function would return True.
    [[5, 1, 2],\
     [1, 1, 20],\
     [3, 10, 3],\
     [20, 1, 1],\
     [8, 10, 9]]
    whereas, the following matrix would result in False:
    [[5, 1, 5],\
     [1, 1, 20],\
     [3, 10, 3],\
     [20, 3, 1],\
     [8, 10, 9]]
    '''
    for x in range(len(matrix)):
        for y in range(x + 1, len(matrix)):
            if matrix[x] == matrix[-y]:
                return True
    return False
